# NOTE: This code requires a full-featured Python environment with SSL and multiprocessing support.
# Avoid minimal builds like Alpine Linux without glibc or musl patching.

import asyncio
import os
from datetime import datetime

from aiogram import Bot
from aiogram.enums.parse_mode import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@onepercenistbetter")

if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment")

# Fallback scheduler if multiprocessing is unavailable
use_basic_scheduler = False

try:
    import multiprocessing
    from multiprocessing import queues
except ImportError:
    print("WARNING: Python build lacks full multiprocessing support. Switching to basic scheduler mode.")
    use_basic_scheduler = True

# Bot and Scheduler setup
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
scheduler = AsyncIOScheduler()

# Content messages mapped to posting time
content_schedule = {
    "06:00": "‚ú® <b>1% –£—Ç—Ä–µ–Ω–Ω—è—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n–°–µ–≥–æ–¥–Ω—è –Ω–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º. –¢–æ–ª—å–∫–æ –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞.",
    "12:00": "üìä <b>–§–∞–∫—Ç –¥–Ω—è</b>\n40% —Ä–µ—à–µ–Ω–∏–π –º—ã —Å–æ–≤–µ—Ä—à–∞–µ–º –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ. –ú–µ–Ω—è—è –æ–¥–Ω—É, —Ç—ã –º–µ–Ω—è–µ—à—å –ø–æ–ª–æ–≤–∏–Ω—É –¥–Ω—è.",
    "18:00": "üéØ <b>–ú–∏–∫—Ä–æ—á–µ–ª–ª–µ–Ω–¥–∂</b>\n10 –º–∏–Ω—É—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞.\n–í—ã–∫–ª—é—á–∏ –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏.",
    "21:59": "üåö <b>–†–µ—Ñ–ª–µ–∫—Å–∏—è</b>\n–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n–ó–∞–≤—Ç—Ä–∞ ‚Äî —Å–Ω–æ–≤–∞ –Ω–∞ 1% –≤–ø–µ—Ä—ë–¥."
}

async def send_post(text: str):
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=text)
        print(f"Posted at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {text[:30]}...")
    except Exception as e:
        print(f"Error posting: {e}")

async def scheduler_start():
    for time_str, message in content_schedule.items():
        hour, minute = map(int, time_str.split(":"))
        scheduler.add_job(send_post, "cron", hour=hour, minute=minute, args=[message])
    scheduler.start()

async def main():
    await scheduler_start()
    print("Bot started and scheduler running...")
    try:
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except ModuleNotFoundError as e:
        if 'ssl' in str(e):
            print("\nERROR: Your Python environment lacks SSL support. Please use a standard Python build.\n")
        elif '_multiprocessing' in str(e):
            print("\nERROR: Your Python lacks _multiprocessing. Use python:3.12-slim or official python.org installer.\n")
        raise
    except RuntimeError as e:
        print(f"Runtime error: {e}")
